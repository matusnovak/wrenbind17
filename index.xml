<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WrenBind17</title>
    <link>https://matusnovak.github.io/wrenbind17/</link>
    <description>Recent content on WrenBind17</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://matusnovak.github.io/wrenbind17/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://matusnovak.github.io/wrenbind17/menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/menu/</guid>
      <description> Home Tutorial  1. Installation 2. Hello World 3. Call Wren function 4. Supported types 5. Executing from file 6. Custom types 7. Class operators 8. Modules and files 9. Customize VM 10. Fn.new and callbacks 11. STL containers   Api Documentation  Classes Namespaces Modules Files    </description>
    </item>
    
    <item>
      <title>1. Installation</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/install/</guid>
      <description>1. Installation #  You don&amp;rsquo;t need to compile this library. This library is a header only library, all you have to do is to include the #include &amp;lt;wrenbind17/wrenbind17.hpp&amp;gt; header in your C++ project. However, you will need to compile and link the Wren VM, and adding an include path where the &amp;lt;wren.hpp&amp;gt; file is located. To see how to build and use the Wren library, see Getting Started section here from the official Wren documentation.</description>
    </item>
    
    <item>
      <title>10. Fn.new and callbacks</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/fn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/fn/</guid>
      <description>10. Fn.new and callbacks #  Let&amp;rsquo;s say you have a GUI button widget and you want to have a specific action when a user clicks on it.
class GuiButton { public: GuiButton(std::function&amp;lt;bool(int)&amp;gt; func) : func(std::move(func)) { } virtual ~GuiButton() { } bool event(int type) { return func(type); } private: std::function&amp;lt;bool(int)&amp;gt; func; }; And now you would like to create this class in Wren and add some custom Wren function as the callback.</description>
    </item>
    
    <item>
      <title>11. STL Containers</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/stl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/stl/</guid>
      <description>11. STL Containers #  11.1. Optionals #  The std::optional&amp;lt;T&amp;gt; will be converted into a null or the type that it can hold. This also works when you call C++ function from Wren that accepts std::optional&amp;lt;T&amp;gt;. You can either call that function with null or with the type T.
11.1.1. Limitations #  Passing std::optional via non-const reference is not allowed. Also passing as a pointer or a shared pointer does not work either.</description>
    </item>
    
    <item>
      <title>2. Hello World</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/hello_world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/hello_world/</guid>
      <description>2. Hello World #  First, create a wren::VM instance, run the source code, find the method you want to run, and execute the method. In the example below, we are printing out a simple &amp;ldquo;Hello World&amp;rdquo; to the console. It is recommended that you create an alias from wrenbind17 to wren so you don&amp;rsquo;t have to type that many characters every time. I highly encourage you to NOT to use using namespace wrenbind17;!</description>
    </item>
    
    <item>
      <title>3. Call Wren function</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/call_wren/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/call_wren/</guid>
      <description>3. Call Wren function #  3.1. Simple call #  To call a Wren function, you will have to first run the source code. Only then you can use wren::VM::find function to find the class defined in the Wren code. This will give you an object of wren::Variable which can be any Wren variable from the VM. In this case, it&amp;rsquo;s a class. Next, find the method you want to call via wren::Variable::func.</description>
    </item>
    
    <item>
      <title>4. Supported types</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/types/</guid>
      <description>4. Supported types #  4.1. List of supported types and conversion #  This is a list of supported types and how they are converted between C++ and Wren. Not everything can be mapped exactly (for example, integers are casted into doubles), so there are some compromises.
   C++ type Wren type Return value from Any     signed char (int8_t) number (64-bit float) .as&amp;lt;int8_t&amp;gt;()   unsigned char (uint8_t) number (64-bit float) .</description>
    </item>
    
    <item>
      <title>5. Executing from file</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/execute_code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/execute_code/</guid>
      <description>5. Executing from file #  Executing Wren code can also be done in the following ways:
// Same as above, specify the module name but instead // of the source code you tell it where the file is located. vm.runFromFile(&amp;#34;main&amp;#34;, &amp;#34;path/to/some/main.wren&amp;#34;); // Run specific module. This module must be an existing file &amp;#34;utils/libB.wren&amp;#34; // in one or more look-up paths specified during creation of wren::Vm vm(...); vm.runFromModule(&amp;#34;utils/libB&amp;#34;); Note
The runFromModule depends on the lookup paths you pass into the wren::VM constructor.</description>
    </item>
    
    <item>
      <title>6. Custom types</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/custom_types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/custom_types/</guid>
      <description>6. Custom types #  Wren supports adding custom types. See official documentation here. This is done via foregin classes that can have member of static functions and fields. All of foreign classes added via WrenBind17 are wrapped in a custom wrapper (wren::detail::ForeignObject&amp;lt;T&amp;gt;) that takes care of handling of instance of your custom C++ type.
In order to use your custom types, you will have to register them as a foreign classes with foreign functions into the Wren VM.</description>
    </item>
    
    <item>
      <title>7. Class operators</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/operators/</guid>
      <description>7. Class operators #  Operators can be added to your custom types, this is done via the wren::ForeignMethodOperator enumeration.
This is a list of all supported operators by WrenBind17:
   Operator Enum Value     Add (+) OPERATOR_ADD   Subtract (-) OPERATOR_SUB   Multiply (*) OPERATOR_MUL   Divide (/) OPERATOR_DIV   Unary negative (-) OPERATOR_NEG   Modulo (%) OPERATOR_MOD   Equal to (==) OPERATOR_EQUAL   Not equal to (!</description>
    </item>
    
    <item>
      <title>8. Modules and files</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/modules/</guid>
      <description>8. Modules and files #  Wren support modularity (official documentation here), but does not exactly work out of the box. WrenBind17 fills this gap by adding a file load function that works using a list of look-up paths.
If you are familiar with Python, this is almost the same as the Python home path for loading modules.
std::vector&amp;lt;std::string&amp;gt; paths = { &amp;#34;some/relative/path&amp;#34;, &amp;#34;C:/absolute/path&amp;#34; }; wren::VM vm(paths); It is highly advised to use absolute paths.</description>
    </item>
    
    <item>
      <title>9. Customize VM</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/customize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/customize/</guid>
      <description>9. Customize VM #  9.1. Min heap and growth #  To control the minimal heap, heap growth, and initial heap, use the constructor to do so. Example:
#include &amp;lt;wrenbind17/wrenbind17.hpp&amp;gt;namespace wren = wrenbind17; // Alias  int main(...) { // These values are default.  // If you leave the constructor empty, these exact  // values will be used.  // The lookup paths for loading other Wren files  std::vector&amp;lt;std::string&amp;gt; paths = {&amp;#34;.</description>
    </item>
    
    <item>
      <title>include</title>
      <link>https://matusnovak.github.io/wrenbind17/files/dir_d44c64559bbebec7f509842c48db8b23/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/dir_d44c64559bbebec7f509842c48db8b23/</guid>
      <description>include #  Directories #     Name     include/wrenbind17     Updated on 17 October 2023 at 12:26:25 UTC</description>
    </item>
    
    <item>
      <title>include/wrenbind17</title>
      <link>https://matusnovak.github.io/wrenbind17/files/dir_0603dac12b22d4faefe24b335e5b06be/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/dir_0603dac12b22d4faefe24b335e5b06be/</guid>
      <description>include/wrenbind17 #  Files #     Name     include/wrenbind17/allocator.hpp   include/wrenbind17/any.hpp   include/wrenbind17/caller.hpp   include/wrenbind17/exception.hpp   include/wrenbind17/foreign.hpp   include/wrenbind17/handle.hpp   include/wrenbind17/index.hpp   include/wrenbind17/map.hpp   include/wrenbind17/method.hpp   include/wrenbind17/module.hpp   include/wrenbind17/object.hpp   include/wrenbind17/pop.hpp   include/wrenbind17/push.hpp   include/wrenbind17/std.hpp   include/wrenbind17/stddeque.hpp   include/wrenbind17/stdlist.hpp   include/wrenbind17/stdmap.hpp   include/wrenbind17/stdoptional.hpp   include/wrenbind17/stdset.hpp   include/wrenbind17/stdvariant.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/allocator.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/allocator_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/allocator_8hpp/</guid>
      <description>include/wrenbind17/allocator.hpp #  Namespaces #     Name     wrenbind17    Source code #  #pragma once  #include &amp;lt;wren.hpp&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;#34;index.hpp&amp;#34;#include &amp;#34;pop.hpp&amp;#34;#include &amp;#34;push.hpp&amp;#34; namespace wrenbind17 { void setNextError(WrenVM* vm, std::string str); #ifndef DOXYGEN_SHOULD_SKIP_THIS  namespace detail { template &amp;lt;typename T, typename... Args&amp;gt; struct ForeignKlassAllocator { static T* ctor(Args&amp;amp;&amp;amp;... args) { return new T(std::forward&amp;lt;Args&amp;gt;(args)...); } template &amp;lt;size_t... Is&amp;gt; static T* ctorFrom(WrenVM* vm, detail::index_list&amp;lt;Is.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/any.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/any_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/any_8hpp/</guid>
      <description>include/wrenbind17/any.hpp #  Namespaces #     Name     wrenbind17    Classes #      Name     class wrenbind17::ReturnValue A return value when calling a Wren function (alias Any)    Source code #  #pragma once  #include &amp;lt;typeinfo&amp;gt;#include &amp;lt;memory&amp;gt; #include &amp;#34;handle.hpp&amp;#34;#include &amp;#34;pop.hpp&amp;#34;#include &amp;#34;push.hpp&amp;#34; namespace wrenbind17 { class ReturnValue { public: ReturnValue() = default; explicit ReturnValue(const WrenType type, Handle handle) : type(type), handle(std::move(handle)) { } ~ReturnValue() = default; ReturnValue(const ReturnValue&amp;amp; other) = delete; ReturnValue(ReturnValue&amp;amp;&amp;amp; other) noexcept { swap(other); } ReturnValue&amp;amp; operator=(const ReturnValue&amp;amp; other) = delete; ReturnValue&amp;amp; operator=(ReturnValue&amp;amp;&amp;amp; other) noexcept { if (this !</description>
    </item>
    
    <item>
      <title>include/wrenbind17/caller.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/caller_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/caller_8hpp/</guid>
      <description>include/wrenbind17/caller.hpp #  Namespaces #     Name     wrenbind17    Source code #  #pragma once  #include &amp;lt;wren.hpp&amp;gt; #include &amp;lt;memory&amp;gt; #include &amp;#34;index.hpp&amp;#34;#include &amp;#34;pop.hpp&amp;#34;#include &amp;#34;push.hpp&amp;#34; namespace wrenbind17 { #ifndef DOXYGEN_SHOULD_SKIP_THIS  namespace detail { template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper { static inline void push(WrenVM* vm, int index, R ret) { PushHelper&amp;lt;R&amp;gt;::f(vm, index, ret); } }; template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper&amp;lt;R&amp;amp;&amp;gt; { static inline void push(WrenVM* vm, int index, R&amp;amp; ret) { PushHelper&amp;lt;R*&amp;gt;::f(vm, index, &amp;amp;ret); } }; template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper&amp;lt;const R&amp;amp;&amp;gt; { static inline void push(WrenVM* vm, int index, const R&amp;amp; ret) { PushHelper&amp;lt;R*&amp;gt;::f(vm, index, &amp;amp;const_cast&amp;lt;R&amp;amp;&amp;gt;(ret)); } }; template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper&amp;lt;R*&amp;gt; { static inline void push(WrenVM* vm, int index, R* ret) { PushHelper&amp;lt;R*&amp;gt;::f(vm, index, ret); } }; template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper&amp;lt;const R*&amp;gt; { static inline void push(WrenVM* vm, int index, const R* ret) { PushHelper&amp;lt;const R*&amp;gt;::f(vm, index, ret); } }; template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper&amp;lt;R&amp;amp;&amp;amp;&amp;gt; { static inline void push(WrenVM* vm, int index, R&amp;amp;&amp;amp; ret) { PushHelper&amp;lt;R&amp;gt;::f(vm, index, std::move(ret)); } }; template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper&amp;lt;const std::shared_ptr&amp;lt;R&amp;gt;&amp;amp;&amp;gt; { static inline void push(WrenVM* vm, int index, const std::shared_ptr&amp;lt;R&amp;gt;&amp;amp; ret) { PushHelper&amp;lt;const std::shared_ptr&amp;lt;R&amp;gt;&amp;amp;&amp;gt;::f(vm, index, ret); } }; template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper&amp;lt;std::shared_ptr&amp;lt;R&amp;gt;&amp;amp;&amp;gt; { static inline void push(WrenVM* vm, int index, std::shared_ptr&amp;lt;R&amp;gt;&amp;amp; ret) { PushHelper&amp;lt;std::shared_ptr&amp;lt;R&amp;gt;&amp;amp;&amp;gt;::f(vm, index, ret); } }; template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper&amp;lt;const std::variant&amp;lt;R&amp;gt;&amp;amp;&amp;gt; { static inline void push(WrenVM* vm, int index, const std::variant&amp;lt;R&amp;gt;&amp;amp; ret) { PushHelper&amp;lt;const std::variant&amp;lt;R&amp;gt;&amp;amp;&amp;gt;::f(vm, index, ret); } }; template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper&amp;lt;std::variant&amp;lt;R&amp;gt;&amp;amp;&amp;gt; { static inline void push(WrenVM* vm, int index, std::variant&amp;lt;R&amp;gt;&amp;amp; ret) { PushHelper&amp;lt;std::variant&amp;lt;R&amp;gt;&amp;amp;&amp;gt;::f(vm, index, ret); } }; template &amp;lt;&amp;gt; inline void ForeginMethodReturnHelper&amp;lt;const std::string&amp;amp;&amp;gt;::push(WrenVM* vm, int index, const std::string&amp;amp; ret) { PushHelper&amp;lt;const std::string&amp;amp;&amp;gt;::f(vm, index, ret); } template &amp;lt;&amp;gt; inline void ForeginMethodReturnHelper&amp;lt;std::string&amp;amp;&amp;gt;::push(WrenVM* vm, int index, std::string&amp;amp; ret) { PushHelper&amp;lt;std::string&amp;amp;&amp;gt;::f(vm, index, ret); } template &amp;lt;typename R, typename T, typename.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/exception.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/exception_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/exception_8hpp/</guid>
      <description>include/wrenbind17/exception.hpp #  Namespaces #     Name     wrenbind17    Classes #      Name     class wrenbind17::Exception   class wrenbind17::NotFound   class wrenbind17::BadCast   class wrenbind17::RuntimeError   class wrenbind17::CompileError    Source code #  #pragma once  #include &amp;lt;stdexcept&amp;gt;#include &amp;lt;memory&amp;gt;#include &amp;lt;string&amp;gt; namespace wrenbind17 { class Exception : public std::exception { public: Exception() = default; explicit Exception(std::string msg) : msg(std::move(msg)) { } const char* what() const throw() override { return msg.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/foreign.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/foreign_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/foreign_8hpp/</guid>
      <description>include/wrenbind17/foreign.hpp #  Namespaces #     Name     wrenbind17    Classes #      Name     class wrenbind17::ForeignMethod Holds information about a foreign function of a foreign class.   class wrenbind17::ForeignProp Holds information about a foreign property of a foreign class.   class wrenbind17::ForeignKlass A foreign class.   class wrenbind17::ForeignMethodImpl Type specific implementation of foreign method.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/handle.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/handle_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/handle_8hpp/</guid>
      <description>include/wrenbind17/handle.hpp #  Namespaces #     Name     wrenbind17    Classes #      Name     class wrenbind17::Handle Holds a reference to some Wren type.    Source code #  #pragma once  #include &amp;lt;wren.hpp&amp;gt; #include &amp;lt;memory&amp;gt; #include &amp;#34;exception.hpp&amp;#34; namespace wrenbind17 { std::shared_ptr&amp;lt;WrenVM&amp;gt; getSharedVm(WrenVM* vm); class Handle { public: Handle() : handle(nullptr) { } Handle(const std::shared_ptr&amp;lt;WrenVM&amp;gt; vm, WrenHandle* handle) : vm(vm), handle(handle) { } ~Handle() { reset(); } Handle(const Handle&amp;amp; other) = delete; Handle(Handle&amp;amp;&amp;amp; other) noexcept : handle(nullptr) { swap(other); } Handle&amp;amp; operator=(const Handle&amp;amp; other) = delete; Handle&amp;amp; operator=(Handle&amp;amp;&amp;amp; other) noexcept { if (this !</description>
    </item>
    
    <item>
      <title>include/wrenbind17/index.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/index_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/index_8hpp/</guid>
      <description>include/wrenbind17/index.hpp #  Namespaces #     Name     wrenbind17    Source code #  #pragma once  #include &amp;lt;memory&amp;gt; namespace wrenbind17 { #ifndef DOXYGEN_SHOULD_SKIP_THIS  namespace detail { template &amp;lt;size_t... Is&amp;gt; struct index_list {}; // Declare primary template for index range builder  template &amp;lt;size_t MIN, size_t N, size_t... Is&amp;gt; struct range_builder; // Base step  template &amp;lt;size_t MIN, size_t... Is&amp;gt; struct range_builder&amp;lt;MIN, MIN, Is.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/map.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/map_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/map_8hpp/</guid>
      <description>include/wrenbind17/map.hpp #  Namespaces #     Name     wrenbind17    Classes #      Name     class wrenbind17::Map Holds native Wren map.    Source code #  #pragma once  #include &amp;#34;method.hpp&amp;#34;#include &amp;#34;pop.hpp&amp;#34;#include &amp;#34;push.hpp&amp;#34; namespace wrenbind17 { class Map { public: Map() { } Map(const std::shared_ptr&amp;lt;Handle&amp;gt;&amp;amp; handle) : handle(handle) { } ~Map() { reset(); } Handle&amp;amp; getHandle() { return *handle; } const Handle&amp;amp; getHandle() const { return *handle; } operator bool() const { return handle.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/method.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/method_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/method_8hpp/</guid>
      <description>include/wrenbind17/method.hpp #  Namespaces #     Name     wrenbind17    Classes #      Name     class wrenbind17::Method    Source code #  #pragma once  #include &amp;lt;wren.hpp&amp;gt; #include &amp;lt;memory&amp;gt; #include &amp;#34;any.hpp&amp;#34;#include &amp;#34;exception.hpp&amp;#34; namespace wrenbind17 { #ifndef DOXYGEN_SHOULD_SKIP_THIS  namespace detail { inline void pushArgs(WrenVM* vm, int idx) { (void)vm; (void)idx; } template &amp;lt;typename First, typename.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/module.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/module_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/module_8hpp/</guid>
      <description>include/wrenbind17/module.hpp #  Namespaces #     Name     wrenbind17    Classes #      Name     class wrenbind17::ForeignModule    Source code #  #pragma once  #include &amp;lt;wren.hpp&amp;gt; #include &amp;lt;vector&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;sstream&amp;gt;#include &amp;lt;unordered_map&amp;gt; #include &amp;#34;foreign.hpp&amp;#34; namespace wrenbind17 { void addClassType(WrenVM* vm, const std::string&amp;amp; module, const std::string&amp;amp; name, size_t hash); void addClassCast(WrenVM* vm, std::shared_ptr&amp;lt;detail::ForeignPtrConvertor&amp;gt; convertor, size_t hash, size_t other); class ForeignModule { public: ForeignModule(std::string name, WrenVM* vm) : name(std::move(name)), vm(vm) { } ForeignModule(const ForeignModule&amp;amp; other) = delete; ForeignModule(ForeignModule&amp;amp;&amp;amp; other) noexcept : vm(nullptr) { swap(other); } ~ForeignModule() = default; ForeignModule&amp;amp; operator=(const ForeignModule&amp;amp; other) = delete; ForeignModule&amp;amp; operator=(ForeignModule&amp;amp;&amp;amp; other) noexcept { if (this !</description>
    </item>
    
    <item>
      <title>include/wrenbind17/object.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/object_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/object_8hpp/</guid>
      <description>include/wrenbind17/object.hpp #  Namespaces #     Name     wrenbind17    Source code #  #pragma once  #include &amp;lt;wren.hpp&amp;gt; #include &amp;lt;cstdlib&amp;gt;#include &amp;lt;memory&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;typeinfo&amp;gt;#include &amp;lt;variant&amp;gt; #include &amp;#34;exception.hpp&amp;#34;#include &amp;#34;handle.hpp&amp;#34; namespace wrenbind17 { #ifndef DOXYGEN_SHOULD_SKIP_THIS  std::string getLastError(WrenVM* vm); inline void exceptionHandler(WrenVM* vm, const std::exception_ptr&amp;amp; eptr) { try { if (eptr) { std::rethrow_exception(eptr); } else { wrenEnsureSlots(vm, 1); wrenSetSlotString(vm, 0, &amp;#34;Unknown error&amp;#34;); wrenAbortFiber(vm, 0); } } catch (std::exception&amp;amp; e) { wrenEnsureSlots(vm, 1); wrenSetSlotString(vm, 0, e.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/pop.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/pop_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/pop_8hpp/</guid>
      <description>include/wrenbind17/pop.hpp #  Namespaces #     Name     wrenbind17    Source code #  #pragma once  #include &amp;lt;wren.hpp&amp;gt; #include &amp;lt;string&amp;gt;#include &amp;lt;memory&amp;gt; #include &amp;#34;object.hpp&amp;#34; namespace wrenbind17 { void getClassType(WrenVM* vm, std::string&amp;amp; module, std::string&amp;amp; name, size_t hash); detail::ForeignPtrConvertor* getClassCast(WrenVM* vm, size_t hash, size_t other); #ifndef DOXYGEN_SHOULD_SKIP_THIS  namespace detail { // ============================================================================================================  // CHECK SLOTS FOR TYPE  // ============================================================================================================  inline const char* wrenSlotTypeToStr(const WrenType type) { switch (type) { case WREN_TYPE_BOOL: return &amp;#34;bool&amp;#34;; case WREN_TYPE_FOREIGN: return &amp;#34;instance&amp;#34;; case WREN_TYPE_LIST: return &amp;#34;list&amp;#34;; case WREN_TYPE_NULL: return &amp;#34;null&amp;#34;; case WREN_TYPE_NUM: return &amp;#34;number&amp;#34;; case WREN_TYPE_STRING: return &amp;#34;string&amp;#34;; case WREN_TYPE_UNKNOWN: default: return &amp;#34;unknown&amp;#34;; } } template &amp;lt;typename T&amp;gt; inline bool is(WrenVM* vm, const int idx) { const auto type = wrenGetSlotType(vm, idx); if (type !</description>
    </item>
    
    <item>
      <title>include/wrenbind17/push.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/push_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/push_8hpp/</guid>
      <description>include/wrenbind17/push.hpp #  Namespaces #     Name     wrenbind17    Source code #  #pragma once  #include &amp;lt;wren.hpp&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;#34;exception.hpp&amp;#34;#include &amp;#34;object.hpp&amp;#34; namespace wrenbind17 { #ifndef DOXYGEN_SHOULD_SKIP_THIS  void getClassType(WrenVM* vm, std::string&amp;amp; module, std::string&amp;amp; name, size_t hash); bool isClassRegistered(WrenVM* vm, const size_t hash); detail::ForeignPtrConvertor* getClassCast(WrenVM* vm, size_t hash, size_t other); namespace detail { template &amp;lt;typename T&amp;gt; struct PushHelper; template &amp;lt;typename T&amp;gt; void pushAsConstRef(WrenVM* vm, int idx, const T&amp;amp; value) { static_assert(!</description>
    </item>
    
    <item>
      <title>include/wrenbind17/std.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/std_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/std_8hpp/</guid>
      <description>include/wrenbind17/std.hpp #  Namespaces #     Name     wrenbind17    Classes #      Name     class wrenbind17::StdVectorBindings   class wrenbind17::StdListBindings   class wrenbind17::AbstractMapBindings    Source code #  #pragma once  #include &amp;lt;algorithm&amp;gt;#include &amp;lt;list&amp;gt;#include &amp;lt;map&amp;gt;#include &amp;lt;unordered_map&amp;gt;#include &amp;lt;vector&amp;gt; #include &amp;#34;module.hpp&amp;#34; namespace wrenbind17 { #ifndef DOXYGEN_SHOULD_SKIP_THIS  namespace detail { template &amp;lt;typename T, typename = void&amp;gt; struct is_equality_comparable : std::false_type {}; template &amp;lt;typename T&amp;gt; struct is_equality_comparable&amp;lt; T, typename std::enable_if&amp;lt;true, decltype(std::declval&amp;lt;T&amp;amp;&amp;gt;() == std::declval&amp;lt;T&amp;amp;&amp;gt;(), (void)0)&amp;gt;::type&amp;gt; : std::true_type {}; } // namespace detail  template &amp;lt;typename T, typename T2 = void&amp;gt; class StdVectorHelper; template &amp;lt;typename T&amp;gt; class StdVectorHelper&amp;lt;T, typename std::enable_if&amp;lt;detail::is_equality_comparable&amp;lt;T&amp;gt;::value&amp;gt;::type&amp;gt; { public: static bool contains(std::vector&amp;lt;T&amp;gt;&amp;amp; self, const T&amp;amp; value) { return std::find(self.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/stddeque.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/stddeque_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/stddeque_8hpp/</guid>
      <description>include/wrenbind17/stddeque.hpp #  Namespaces #     Name     wrenbind17    Source code #  #pragma once  #include &amp;lt;wren.hpp&amp;gt; #include &amp;lt;deque&amp;gt; #include &amp;#34;pop.hpp&amp;#34;#include &amp;#34;push.hpp&amp;#34; namespace wrenbind17 { #ifndef DOXYGEN_SHOULD_SKIP_THIS  namespace detail { template &amp;lt;typename T&amp;gt; struct PushHelper&amp;lt;std::deque&amp;lt;T&amp;gt;&amp;gt; { static inline void f(WrenVM* vm, int idx, std::deque&amp;lt;T&amp;gt; value) { if (isClassRegistered(vm, typeid(std::deque&amp;lt;T&amp;gt;).hash_code())) { pushAsMove&amp;lt;std::deque&amp;lt;T&amp;gt;&amp;gt;(vm, idx, std::move(value)); } else { loopAndPushIterable(vm, idx, value.begin(), value.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/stdlist.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/stdlist_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/stdlist_8hpp/</guid>
      <description>include/wrenbind17/stdlist.hpp #  Namespaces #     Name     wrenbind17    Source code #  #pragma once  #include &amp;lt;wren.hpp&amp;gt; #include &amp;lt;list&amp;gt; #include &amp;#34;pop.hpp&amp;#34;#include &amp;#34;push.hpp&amp;#34; namespace wrenbind17 { #ifndef DOXYGEN_SHOULD_SKIP_THIS  namespace detail { template &amp;lt;typename T&amp;gt; struct PushHelper&amp;lt;std::list&amp;lt;T&amp;gt;&amp;gt; { static inline void f(WrenVM* vm, int idx, std::list&amp;lt;T&amp;gt; value) { if (isClassRegistered(vm, typeid(std::list&amp;lt;T&amp;gt;).hash_code())) { pushAsMove&amp;lt;std::list&amp;lt;T&amp;gt;&amp;gt;(vm, idx, std::move(value)); } else { loopAndPushIterable(vm, idx, value.begin(), value.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/stdmap.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/stdmap_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/stdmap_8hpp/</guid>
      <description>include/wrenbind17/stdmap.hpp #  Namespaces #     Name     wrenbind17    Source code #  #pragma once  #include &amp;lt;wren.hpp&amp;gt; #include &amp;lt;map&amp;gt;#include &amp;lt;unordered_map&amp;gt; #include &amp;#34;pop.hpp&amp;#34;#include &amp;#34;push.hpp&amp;#34; namespace wrenbind17 { #ifndef DOXYGEN_SHOULD_SKIP_THIS  namespace detail { template &amp;lt;typename T&amp;gt; struct PushHelper&amp;lt;std::map&amp;lt;std::string, T&amp;gt;&amp;gt; { static inline void f(WrenVM* vm, int idx, std::map&amp;lt;std::string, T&amp;gt; value) { if (isClassRegistered(vm, typeid(std::map&amp;lt;std::string, T&amp;gt;).hash_code())) { pushAsMove&amp;lt;std::map&amp;lt;std::string, T&amp;gt;&amp;gt;(vm, idx, std::move(value)); } else { loopAndPushKeyPair(vm, idx, value.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/stdoptional.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/stdoptional_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/stdoptional_8hpp/</guid>
      <description>include/wrenbind17/stdoptional.hpp #  Namespaces #     Name     wrenbind17    Source code #  #pragma once  #include &amp;lt;wren.hpp&amp;gt; #include &amp;lt;optional&amp;gt; #include &amp;#34;pop.hpp&amp;#34;#include &amp;#34;push.hpp&amp;#34; namespace wrenbind17 { #ifndef DOXYGEN_SHOULD_SKIP_THIS  namespace detail { template &amp;lt;typename T&amp;gt; struct PushHelper&amp;lt;std::optional&amp;lt;T&amp;gt;&amp;gt; { inline static void f(WrenVM* vm, int idx, const std::optional&amp;lt;T&amp;gt;&amp;amp; value) { if (value.has_value()) { PushHelper&amp;lt;T&amp;gt;::f(vm, idx, value.value()); } else { PushHelper&amp;lt;std::nullptr_t&amp;gt;::f(vm, idx, nullptr); } } }; template &amp;lt;typename T&amp;gt; struct PushHelper&amp;lt;std::optional&amp;lt;T&amp;gt;&amp;amp;&amp;gt; { inline static void f(WrenVM* vm, int idx, const std::optional&amp;lt;T&amp;gt;&amp;amp; value) { PushHelper&amp;lt;std::optional&amp;lt;T&amp;gt;&amp;gt;::f(vm, idx, value); } }; template &amp;lt;typename T&amp;gt; struct PushHelper&amp;lt;std::optional&amp;lt;T&amp;gt;*&amp;gt; { inline static void f(WrenVM* vm, int idx, const std::optional&amp;lt;T&amp;gt;* value) { PushHelper&amp;lt;std::optional&amp;lt;T&amp;gt;&amp;gt;::f(vm, idx, *value); } }; template &amp;lt;typename T&amp;gt; struct PushHelper&amp;lt;const std::optional&amp;lt;T&amp;gt;&amp;amp;&amp;gt; { inline static void f(WrenVM* vm, int idx, const std::optional&amp;lt;T&amp;gt;&amp;amp; value) { PushHelper&amp;lt;std::optional&amp;lt;T&amp;gt;&amp;gt;::f(vm, idx, value); } }; template &amp;lt;typename T&amp;gt; struct PopHelper&amp;lt;std::optional&amp;lt;T&amp;gt;&amp;gt; { static inline std::optional&amp;lt;T&amp;gt; f(WrenVM* vm, const int idx) { if (is&amp;lt;std::nullptr_t&amp;gt;(vm, idx)) { return std::nullopt; } else { return PopHelper&amp;lt;T&amp;gt;::f(vm, idx); } } }; template &amp;lt;typename T&amp;gt; struct PopHelper&amp;lt;const std::optional&amp;lt;T&amp;gt;&amp;amp;&amp;gt; { static inline std::optional&amp;lt;T&amp;gt; f(WrenVM* vm, const int idx) { return PopHelper&amp;lt;std::optional&amp;lt;T&amp;gt;&amp;gt;::f(vm, idx); } }; } // namespace detail #endif } // namespace wrenbind17  Updated on 17 October 2023 at 12:26:25 UTC</description>
    </item>
    
    <item>
      <title>include/wrenbind17/stdset.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/stdset_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/stdset_8hpp/</guid>
      <description>include/wrenbind17/stdset.hpp #  Namespaces #     Name     wrenbind17    Source code #  #pragma once  #include &amp;lt;wren.hpp&amp;gt; #include &amp;lt;set&amp;gt;#include &amp;lt;unordered_set&amp;gt; #include &amp;#34;pop.hpp&amp;#34;#include &amp;#34;push.hpp&amp;#34; namespace wrenbind17 { #ifndef DOXYGEN_SHOULD_SKIP_THIS  namespace detail { template &amp;lt;typename T&amp;gt; struct PushHelper&amp;lt;std::set&amp;lt;T&amp;gt;&amp;gt; { static inline void f(WrenVM* vm, int idx, std::set&amp;lt;T&amp;gt; value) { if (isClassRegistered(vm, typeid(std::set&amp;lt;T&amp;gt;).hash_code())) { pushAsMove&amp;lt;std::vector&amp;lt;T&amp;gt;&amp;gt;(vm, idx, std::move(value)); } else { loopAndPushIterable(vm, idx, value.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/stdvariant.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/stdvariant_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/stdvariant_8hpp/</guid>
      <description>include/wrenbind17/stdvariant.hpp #  Namespaces #     Name     wrenbind17    Source code #  #pragma once  #include &amp;lt;wren.hpp&amp;gt; #include &amp;lt;variant&amp;gt; #include &amp;#34;pop.hpp&amp;#34;#include &amp;#34;push.hpp&amp;#34; namespace wrenbind17 { #ifndef DOXYGEN_SHOULD_SKIP_THIS  namespace detail { template &amp;lt;typename VariantType&amp;gt; inline void loopAndPushVariant(WrenVM* vm, int idx, const VariantType&amp;amp; v, size_t i) { PushHelper&amp;lt;std::nullptr_t&amp;gt;::f(vm, idx, nullptr); } template &amp;lt;typename VariantType, typename T, typename... Ts&amp;gt; inline void loopAndPushVariant(WrenVM* vm, int idx, const VariantType&amp;amp; v, size_t i) { if (v.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/stdvector.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/stdvector_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/stdvector_8hpp/</guid>
      <description>include/wrenbind17/stdvector.hpp #  Namespaces #     Name     wrenbind17    Source code #  #pragma once  #include &amp;lt;wren.hpp&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;#34;pop.hpp&amp;#34;#include &amp;#34;push.hpp&amp;#34; namespace wrenbind17 { #ifndef DOXYGEN_SHOULD_SKIP_THIS  namespace detail { template &amp;lt;typename T&amp;gt; struct PushHelper&amp;lt;std::vector&amp;lt;T&amp;gt;&amp;gt; { static inline void f(WrenVM* vm, int idx, std::vector&amp;lt;T&amp;gt; value) { if (isClassRegistered(vm, typeid(std::vector&amp;lt;T&amp;gt;).hash_code())) { pushAsMove&amp;lt;std::vector&amp;lt;T&amp;gt;&amp;gt;(vm, idx, std::move(value)); } else { loopAndPushIterable(vm, idx, value.begin(), value.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/variable.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/variable_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/variable_8hpp/</guid>
      <description>include/wrenbind17/variable.hpp #  Namespaces #     Name     wrenbind17    Classes #      Name     class wrenbind17::Variable Holds some Wren variable which can be a class or class instance.    Source code #  #pragma once  #include &amp;lt;memory&amp;gt; #include &amp;#34;exception.hpp&amp;#34;#include &amp;#34;method.hpp&amp;#34;#include &amp;#34;pop.hpp&amp;#34;#include &amp;#34;push.hpp&amp;#34; namespace wrenbind17 { class Variable { public: Variable() { } Variable(const std::shared_ptr&amp;lt;Handle&amp;gt;&amp;amp; handle) : handle(handle) { } ~Variable() { reset(); } Method func(const std::string&amp;amp; signature) { if (const auto ptr = handle-&amp;gt;getVmWeak().</description>
    </item>
    
    <item>
      <title>include/wrenbind17/vm.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/vm_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/vm_8hpp/</guid>
      <description>include/wrenbind17/vm.hpp #  Namespaces #     Name     wrenbind17    Classes #      Name     class wrenbind17::VM Holds the entire Wren VM from which all of the magic happens.   class wrenbind17::VM::Data    Source code #  #pragma once  #include &amp;lt;wren.hpp&amp;gt; #include &amp;lt;iostream&amp;gt;#include &amp;lt;sstream&amp;gt;#include &amp;lt;cassert&amp;gt;#include &amp;lt;cstdlib&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;fstream&amp;gt;#include &amp;lt;functional&amp;gt;#include &amp;lt;unordered_map&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;memory&amp;gt; #include &amp;#34;exception.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/wrenbind17.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/wrenbind17_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/wrenbind17_8hpp/</guid>
      <description>include/wrenbind17/wrenbind17.hpp #  Source code #  #pragma once  #include &amp;#34;std.hpp&amp;#34;#include &amp;#34;stddeque.hpp&amp;#34;#include &amp;#34;stdlist.hpp&amp;#34;#include &amp;#34;stdmap.hpp&amp;#34;#include &amp;#34;stdoptional.hpp&amp;#34;#include &amp;#34;stdset.hpp&amp;#34;#include &amp;#34;stdvariant.hpp&amp;#34;#include &amp;#34;stdvector.hpp&amp;#34;#include &amp;#34;vm.hpp&amp;#34; Updated on 17 October 2023 at 12:26:25 UTC</description>
    </item>
    
    <item>
      <title>std</title>
      <link>https://matusnovak.github.io/wrenbind17/namespaces/namespacestd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/namespaces/namespacestd/</guid>
      <description>std #   Updated on 17 October 2023 at 12:26:25 UTC</description>
    </item>
    
    <item>
      <title>Wrenbind17</title>
      <link>https://matusnovak.github.io/wrenbind17/modules/group__wrenbind17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/modules/group__wrenbind17/</guid>
      <description>Wren lang binding library for C++17.</description>
    </item>
    
    <item>
      <title>wrenbind17</title>
      <link>https://matusnovak.github.io/wrenbind17/namespaces/namespacewrenbind17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/namespaces/namespacewrenbind17/</guid>
      <description>wrenbind17 #  Classes #      Name     class wrenbind17::ReturnValue A return value when calling a Wren function (alias Any)   class wrenbind17::Exception   class wrenbind17::NotFound   class wrenbind17::BadCast   class wrenbind17::RuntimeError   class wrenbind17::CompileError   class wrenbind17::ForeignMethod Holds information about a foreign function of a foreign class.   class wrenbind17::ForeignProp Holds information about a foreign property of a foreign class.</description>
    </item>
    
    <item>
      <title>wrenbind17::AbstractMapBindings</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_abstract_map_bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_abstract_map_bindings/</guid>
      <description>wrenbind17::AbstractMapBindings #  More&amp;hellip;
#include &amp;lt;std.hpp&amp;gt;
Public Types #      Name     typedef Map::key_type K   typedef Map::mapped_type T   typedef Map::iterator Iterator   typedef Map::value_type Pair    Public Functions #      Name     void setIndex(Map &amp;amp; self, const K &amp;amp; key, T value)   T &amp;amp; getIndex(Map &amp;amp; self, const K &amp;amp; key)   std::variant&amp;lt; T, std::nullptr_t &amp;gt; remove(Map &amp;amp; self, const K &amp;amp; key)   bool containsKey(Map &amp;amp; self, const K &amp;amp; key)   size_t count(Map &amp;amp; self)   void clear(Map &amp;amp; self)   size_t size(Map &amp;amp; self)   bool empty(Map &amp;amp; self)   std::variant&amp;lt; bool, Iterator &amp;gt; iterate(Map &amp;amp; self, std::variant&amp;lt; std::nullptr_t, Iterator &amp;gt; other)   Pair iteratorValue(Map &amp;amp; self, std::shared_ptr&amp;lt; Iterator &amp;gt; other)   const K &amp;amp; pairKey(Pair &amp;amp; pair)   const T &amp;amp; pairValue(Pair &amp;amp; pair)   void bind(ForeignModule &amp;amp; m, const std::string &amp;amp; name)    Detailed Description #  template &amp;lt;typename Map &amp;gt; class wrenbind17::AbstractMapBindings; Public Types Documentation #  typedef K #  typedef Map::key_type wrenbind17::AbstractMapBindings&amp;lt; Map &amp;gt;::K; typedef T #  typedef Map::mapped_type wrenbind17::AbstractMapBindings&amp;lt; Map &amp;gt;::T; typedef Iterator #  typedef Map::iterator wrenbind17::AbstractMapBindings&amp;lt; Map &amp;gt;::Iterator; typedef Pair #  typedef Map::value_type wrenbind17::AbstractMapBindings&amp;lt; Map &amp;gt;::Pair; Public Functions Documentation #  function setIndex #  static inline void setIndex( Map &amp;amp; self, const K &amp;amp; key, T value ) function getIndex #  static inline T &amp;amp; getIndex( Map &amp;amp; self, const K &amp;amp; key ) function remove #  static inline std::variant&amp;lt; T, std::nullptr_t &amp;gt; remove( Map &amp;amp; self, const K &amp;amp; key ) function containsKey #  static inline bool containsKey( Map &amp;amp; self, const K &amp;amp; key ) function count #  static inline size_t count( Map &amp;amp; self ) function clear #  static inline void clear( Map &amp;amp; self ) function size #  static inline size_t size( Map &amp;amp; self ) function empty #  static inline bool empty( Map &amp;amp; self ) function iterate #  static inline std::variant&amp;lt; bool, Iterator &amp;gt; iterate( Map &amp;amp; self, std::variant&amp;lt; std::nullptr_t, Iterator &amp;gt; other ) function iteratorValue #  static inline Pair iteratorValue( Map &amp;amp; self, std::shared_ptr&amp;lt; Iterator &amp;gt; other ) function pairKey #  static inline const K &amp;amp; pairKey( Pair &amp;amp; pair ) function pairValue #  static inline const T &amp;amp; pairValue( Pair &amp;amp; pair ) function bind #  static inline void bind( ForeignModule &amp;amp; m, const std::string &amp;amp; name )  Updated on 17 October 2023 at 12:26:25 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::BadCast</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_bad_cast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_bad_cast/</guid>
      <description>wrenbind17::BadCast #  Module: Wrenbind17
#include &amp;lt;exception.hpp&amp;gt;
Inherits from wrenbind17::Exception, std::exception
Public Functions #      Name      BadCast()    BadCast(std::string msg)    Additional inherited members #  Public Functions inherited from wrenbind17::Exception
    Name      Exception() =default    Exception(std::string msg)   const char * what() const override    Public Functions Documentation #  function BadCast #  inline BadCast() function BadCast #  inline explicit BadCast( std::string msg )  Updated on 17 October 2023 at 12:26:25 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::CompileError</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_compile_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_compile_error/</guid>
      <description>wrenbind17::CompileError #  Module: Wrenbind17
#include &amp;lt;exception.hpp&amp;gt;
Inherits from wrenbind17::Exception, std::exception
Public Functions #      Name      CompileError(std::string msg)    Additional inherited members #  Public Functions inherited from wrenbind17::Exception
    Name      Exception() =default    Exception(std::string msg)   const char * what() const override    Public Functions Documentation #  function CompileError #  inline explicit CompileError( std::string msg )  Updated on 17 October 2023 at 12:26:25 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::Exception</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_exception/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_exception/</guid>
      <description>wrenbind17::Exception #  Module: Wrenbind17
#include &amp;lt;exception.hpp&amp;gt;
Inherits from std::exception
Inherited by wrenbind17::BadCast, wrenbind17::CompileError, wrenbind17::NotFound, wrenbind17::RuntimeError
Public Functions #      Name      Exception() =default    Exception(std::string msg)   const char * what() const override    Public Functions Documentation #  function Exception #  Exception() =default function Exception #  inline explicit Exception( std::string msg ) function what #  inline const char * what() const override  Updated on 17 October 2023 at 12:26:25 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignKlass</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_klass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_klass/</guid>
      <description>A foreign class.</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignKlassImpl</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_klass_impl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_klass_impl/</guid>
      <description>wrenbind17::ForeignKlassImpl #  Module: Wrenbind17
More&amp;hellip;
#include &amp;lt;foreign.hpp&amp;gt;
Inherits from wrenbind17::ForeignKlass
Public Functions #      Name      ForeignKlassImpl(std::string name)    ~ForeignKlassImpl() =default    ForeignKlassImpl(const ForeignKlassImpl&amp;lt; T &amp;gt; &amp;amp; other)   virtual void generate(std::ostream &amp;amp; os) const overrideGenerate Wren code for this class.   template &amp;lt;typename&amp;hellip; Args&amp;gt; void ctor(const std::string &amp;amp; name =&amp;quot;new&amp;rdquo;)Add a constructor to this class.</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignMethod</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_method/</guid>
      <description>Holds information about a foreign function of a foreign class.</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignMethodImpl</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_method_impl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_method_impl/</guid>
      <description>Type specific implementation of foreign method.</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignModule</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_module/</guid>
      <description>wrenbind17::ForeignModule #  Module: Wrenbind17
#include &amp;lt;module.hpp&amp;gt;
Public Functions #      Name      ForeignModule(std::string name, WrenVM * vm)    ForeignModule(const ForeignModule &amp;amp; other)    ForeignModule(ForeignModule &amp;amp;&amp;amp; other)    ~ForeignModule() =default   ForeignModule &amp;amp; operator=(const ForeignModule &amp;amp; other)   ForeignModule &amp;amp; operator=(ForeignModule &amp;amp;&amp;amp; other)   void swap(ForeignModule &amp;amp; other)   template &amp;lt;typename T ,typename&amp;hellip; Others&amp;gt; ForeignKlassImpl&amp;lt; T &amp;gt; &amp;amp; klass(std::string name)   std::string str() const   void append(std::string text)   ForeignKlass &amp;amp; findKlass(const std::string &amp;amp; name)   const std::string &amp;amp; getName() const    Public Functions Documentation #  function ForeignModule #  inline ForeignModule( std::string name, WrenVM * vm ) function ForeignModule #  ForeignModule( const ForeignModule &amp;amp; other ) function ForeignModule #  inline ForeignModule( ForeignModule &amp;amp;&amp;amp; other ) function ~ForeignModule #  ~ForeignModule() =default function operator= #  ForeignModule &amp;amp; operator=( const ForeignModule &amp;amp; other ) function operator= #  inline ForeignModule &amp;amp; operator=( ForeignModule &amp;amp;&amp;amp; other ) function swap #  inline void swap( ForeignModule &amp;amp; other ) function klass #  template &amp;lt;typename T , typename.</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignProp</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_prop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_prop/</guid>
      <description>Holds information about a foreign property of a foreign class.</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignPropImpl</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_prop_impl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_prop_impl/</guid>
      <description>wrenbind17::ForeignPropImpl #  Module: Wrenbind17
More&amp;hellip;
#include &amp;lt;foreign.hpp&amp;gt;
Inherits from wrenbind17::ForeignProp
Public Functions #      Name      ForeignPropImpl(std::string name, WrenForeignMethodFn getter, WrenForeignMethodFn setter, const bool isStatic)    ~ForeignPropImpl() =default    Additional inherited members #  Public Functions inherited from wrenbind17::ForeignProp
    Name      ForeignProp(std::string name, WrenForeignMethodFn getter, WrenForeignMethodFn setter, const bool isStatic)   virtual ~ForeignProp() =default    ForeignProp(const ForeignProp &amp;amp; other)   void generate(std::ostream &amp;amp; os) const   const std::string &amp;amp; getName() constReturns the name of this property.</description>
    </item>
    
    <item>
      <title>wrenbind17::Handle</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_handle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_handle/</guid>
      <description>Holds a reference to some Wren type.</description>
    </item>
    
    <item>
      <title>wrenbind17::Map</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_map/</guid>
      <description>Holds native Wren map.</description>
    </item>
    
    <item>
      <title>wrenbind17::Method</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_method/</guid>
      <description>wrenbind17::Method #  Module: Wrenbind17
#include &amp;lt;method.hpp&amp;gt;
Public Functions #      Name      Method() =default    Method(std::shared_ptr&amp;lt; Handle &amp;gt; variable, std::shared_ptr&amp;lt; Handle &amp;gt; handle)    ~Method()   template &amp;lt;typename&amp;hellip; Args&amp;gt; Any operator()(Args &amp;amp;&amp;amp;&amp;hellip; args)    operator bool() const   void reset()    Public Functions Documentation #  function Method #  Method() =default function Method #  inline Method( std::shared_ptr&amp;lt; Handle &amp;gt; variable, std::shared_ptr&amp;lt; Handle &amp;gt; handle ) function ~Method #  inline ~Method() function operator() #  template &amp;lt;typename.</description>
    </item>
    
    <item>
      <title>wrenbind17::NotFound</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_not_found/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_not_found/</guid>
      <description>wrenbind17::NotFound #  Module: Wrenbind17
#include &amp;lt;exception.hpp&amp;gt;
Inherits from wrenbind17::Exception, std::exception
Public Functions #      Name      NotFound()    Additional inherited members #  Public Functions inherited from wrenbind17::Exception
    Name      Exception() =default    Exception(std::string msg)   const char * what() const override    Public Functions Documentation #  function NotFound #  inline NotFound()  Updated on 17 October 2023 at 12:26:25 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::ReturnValue</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_return_value/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_return_value/</guid>
      <description>A return value when calling a Wren function (alias Any)</description>
    </item>
    
    <item>
      <title>wrenbind17::RuntimeError</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_runtime_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_runtime_error/</guid>
      <description>wrenbind17::RuntimeError #  Module: Wrenbind17
#include &amp;lt;exception.hpp&amp;gt;
Inherits from wrenbind17::Exception, std::exception
Public Functions #      Name      RuntimeError(std::string msg)    Additional inherited members #  Public Functions inherited from wrenbind17::Exception
    Name      Exception() =default    Exception(std::string msg)   const char * what() const override    Public Functions Documentation #  function RuntimeError #  inline explicit RuntimeError( std::string msg )  Updated on 17 October 2023 at 12:26:25 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::StdListBindings</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_std_list_bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_std_list_bindings/</guid>
      <description>wrenbind17::StdListBindings #  More&amp;hellip;
#include &amp;lt;std.hpp&amp;gt;
Public Types #      Name     typedef std::list&amp;lt; T &amp;gt;::iterator Iterator   typedef std::list&amp;lt; T &amp;gt; List    Public Functions #      Name     void setIndex(List &amp;amp; self, size_t index, T value)   const T &amp;amp; getIndex(List &amp;amp; self, size_t index)   void add(List &amp;amp; self, T value)   std::variant&amp;lt; bool, Iterator &amp;gt; iterate(List &amp;amp; self, std::variant&amp;lt; std::nullptr_t, Iterator &amp;gt; other)   const T &amp;amp; iteratorValue(List &amp;amp; self, std::shared_ptr&amp;lt; Iterator &amp;gt; other)   size_t count(List &amp;amp; self)   T removeAt(List &amp;amp; self, int32_t index)   void insert(List &amp;amp; self, int32_t index, T value)   bool contains(List &amp;amp; self, const T &amp;amp; value)   T pop(List &amp;amp; self)   void clear(List &amp;amp; self)   size_t size(List &amp;amp; self)   bool empty(List &amp;amp; self)   void bind(ForeignModule &amp;amp; m, const std::string &amp;amp; name)    Detailed Description #  template &amp;lt;typename T &amp;gt; class wrenbind17::StdListBindings; Public Types Documentation #  typedef Iterator #  typedef std::list&amp;lt;T&amp;gt;::iterator wrenbind17::StdListBindings&amp;lt; T &amp;gt;::Iterator; typedef List #  typedef std::list&amp;lt;T&amp;gt; wrenbind17::StdListBindings&amp;lt; T &amp;gt;::List; Public Functions Documentation #  function setIndex #  static inline void setIndex( List &amp;amp; self, size_t index, T value ) function getIndex #  static inline const T &amp;amp; getIndex( List &amp;amp; self, size_t index ) function add #  static inline void add( List &amp;amp; self, T value ) function iterate #  static inline std::variant&amp;lt; bool, Iterator &amp;gt; iterate( List &amp;amp; self, std::variant&amp;lt; std::nullptr_t, Iterator &amp;gt; other ) function iteratorValue #  static inline const T &amp;amp; iteratorValue( List &amp;amp; self, std::shared_ptr&amp;lt; Iterator &amp;gt; other ) function count #  static inline size_t count( List &amp;amp; self ) function removeAt #  static inline T removeAt( List &amp;amp; self, int32_t index ) function insert #  static inline void insert( List &amp;amp; self, int32_t index, T value ) function contains #  static inline bool contains( List &amp;amp; self, const T &amp;amp; value ) function pop #  static inline T pop( List &amp;amp; self ) function clear #  static inline void clear( List &amp;amp; self ) function size #  static inline size_t size( List &amp;amp; self ) function empty #  static inline bool empty( List &amp;amp; self ) function bind #  static inline void bind( ForeignModule &amp;amp; m, const std::string &amp;amp; name )  Updated on 17 October 2023 at 12:26:25 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::StdVectorBindings</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_std_vector_bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_std_vector_bindings/</guid>
      <description>wrenbind17::StdVectorBindings #  More&amp;hellip;
#include &amp;lt;std.hpp&amp;gt;
Public Types #      Name     typedef std::vector&amp;lt; T &amp;gt;::iterator Iterator   typedef std::vector&amp;lt; T &amp;gt; Vector    Public Functions #      Name     void setIndex(Vector &amp;amp; self, size_t index, T value)   const T &amp;amp; getIndex(Vector &amp;amp; self, size_t index)   void add(Vector &amp;amp; self, T value)   std::variant&amp;lt; bool, Iterator &amp;gt; iterate(Vector &amp;amp; self, std::variant&amp;lt; std::nullptr_t, Iterator &amp;gt; other)   const T &amp;amp; iteratorValue(Vector &amp;amp; self, std::shared_ptr&amp;lt; Iterator &amp;gt; other)   size_t count(Vector &amp;amp; self)   T removeAt(Vector &amp;amp; self, int32_t index)   void insert(Vector &amp;amp; self, int32_t index, T value)   bool contains(Vector &amp;amp; self, const T &amp;amp; value)   T pop(Vector &amp;amp; self)   void clear(Vector &amp;amp; self)   size_t size(Vector &amp;amp; self)   bool empty(Vector &amp;amp; self)   void bind(ForeignModule &amp;amp; m, const std::string &amp;amp; name)    Detailed Description #  template &amp;lt;typename T &amp;gt; class wrenbind17::StdVectorBindings; Public Types Documentation #  typedef Iterator #  typedef std::vector&amp;lt;T&amp;gt;::iterator wrenbind17::StdVectorBindings&amp;lt; T &amp;gt;::Iterator; typedef Vector #  typedef std::vector&amp;lt;T&amp;gt; wrenbind17::StdVectorBindings&amp;lt; T &amp;gt;::Vector; Public Functions Documentation #  function setIndex #  static inline void setIndex( Vector &amp;amp; self, size_t index, T value ) function getIndex #  static inline const T &amp;amp; getIndex( Vector &amp;amp; self, size_t index ) function add #  static inline void add( Vector &amp;amp; self, T value ) function iterate #  static inline std::variant&amp;lt; bool, Iterator &amp;gt; iterate( Vector &amp;amp; self, std::variant&amp;lt; std::nullptr_t, Iterator &amp;gt; other ) function iteratorValue #  static inline const T &amp;amp; iteratorValue( Vector &amp;amp; self, std::shared_ptr&amp;lt; Iterator &amp;gt; other ) function count #  static inline size_t count( Vector &amp;amp; self ) function removeAt #  static inline T removeAt( Vector &amp;amp; self, int32_t index ) function insert #  static inline void insert( Vector &amp;amp; self, int32_t index, T value ) function contains #  static inline bool contains( Vector &amp;amp; self, const T &amp;amp; value ) function pop #  static inline T pop( Vector &amp;amp; self ) function clear #  static inline void clear( Vector &amp;amp; self ) function size #  static inline size_t size( Vector &amp;amp; self ) function empty #  static inline bool empty( Vector &amp;amp; self ) function bind #  static inline void bind( ForeignModule &amp;amp; m, const std::string &amp;amp; name )  Updated on 17 October 2023 at 12:26:25 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::Variable</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_variable/</guid>
      <description>Holds some Wren variable which can be a class or class instance.</description>
    </item>
    
    <item>
      <title>wrenbind17::VM</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_v_m/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_v_m/</guid>
      <description>Holds the entire Wren VM from which all of the magic happens.</description>
    </item>
    
    <item>
      <title>wrenbind17::VM::Data</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_v_m_1_1_data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_v_m_1_1_data/</guid>
      <description>wrenbind17::VM::Data #  #include &amp;lt;vm.hpp&amp;gt;
Public Functions #      Name     void addClassType(const std::string &amp;amp; module, const std::string &amp;amp; name, const size_t hash)   void getClassType(std::string &amp;amp; module, std::string &amp;amp; name, const size_t hash)   bool isClassRegistered(const size_t hash) const   void addClassCast(std::shared_ptr&amp;lt; detail::ForeignPtrConvertor &amp;gt; convertor, const size_t hash, const size_t other)   detail::ForeignPtrConvertor * getClassCast(const size_t hash, const size_t other)   std::string getLastError()   void setNextError(std::string str)    Public Attributes #      Name     std::shared_ptr&amp;lt; WrenVM &amp;gt; vm   WrenConfiguration config   std::vector&amp;lt; std::string &amp;gt; paths   std::unordered_map&amp;lt; std::string, ForeignModule &amp;gt; modules   std::unordered_map&amp;lt; size_t, std::string &amp;gt; classToModule   std::unordered_map&amp;lt; size_t, std::string &amp;gt; classToName   std::unordered_map&amp;lt; std::pair&amp;lt; size_t, size_t &amp;gt;, std::shared_ptr&amp;lt; detail::ForeignPtrConvertor &amp;gt; &amp;gt; classCasting   std::string lastError   std::string nextError   PrintFn printFn   LoadFileFn loadFileFn    Public Functions Documentation #  function addClassType #  inline void addClassType( const std::string &amp;amp; module, const std::string &amp;amp; name, const size_t hash ) function getClassType #  inline void getClassType( std::string &amp;amp; module, std::string &amp;amp; name, const size_t hash ) function isClassRegistered #  inline bool isClassRegistered( const size_t hash ) const function addClassCast #  inline void addClassCast( std::shared_ptr&amp;lt; detail::ForeignPtrConvertor &amp;gt; convertor, const size_t hash, const size_t other ) function getClassCast #  inline detail::ForeignPtrConvertor * getClassCast( const size_t hash, const size_t other ) function getLastError #  inline std::string getLastError() function setNextError #  inline void setNextError( std::string str ) Public Attributes Documentation #  variable vm #  std::shared_ptr&amp;lt; WrenVM &amp;gt; vm; variable config #  WrenConfiguration config; variable paths #  std::vector&amp;lt; std::string &amp;gt; paths; variable modules #  std::unordered_map&amp;lt; std::string, ForeignModule &amp;gt; modules; variable classToModule #  std::unordered_map&amp;lt; size_t, std::string &amp;gt; classToModule; variable classToName #  std::unordered_map&amp;lt; size_t, std::string &amp;gt; classToName; variable classCasting #  std::unordered_map&amp;lt; std::pair&amp;lt; size_t, size_t &amp;gt;, std::shared_ptr&amp;lt; detail::ForeignPtrConvertor &amp;gt; &amp;gt; classCasting; variable lastError #  std::string lastError; variable nextError #  std::string nextError; variable printFn #  PrintFn printFn; variable loadFileFn #  LoadFileFn loadFileFn;  Updated on 17 October 2023 at 12:26:25 UTC</description>
    </item>
    
  </channel>
</rss>